nested loop
sometimes you may  want to place aone loop inside another
you might want to count the number of occupants  in each house on the street
step from the house, and for each house you count the number of occupants

going through all the houses could be an outer loop and for each iteration of the outer loop 
you would have an inner loop that counts the occupants.

example

for (int i = 1; i<=count; ++i)
{
    sum = 0
    for (int j = 1; j<=i; ++j)
    sum+=j;

    printf("\n%d\t%d/",i,sum)
}



for (int i=1; i<=count; ++i)
{
 sum=1;             //initialize sum for the inner loop
 j=1;               // initialzie integer to be added
printf("\n1");

//calculate sum of integers from 1 to i

while(j<i)
{
sum+=++j;
printf("+%d",j);      //output+j on the same line
}
printf("=%d",sum); //output = sum
}


countinue statement

sometimes a situation arises where ypu do not want to end a loop, but you want to skip the current iteration.
the continue statement in the body of a loop does this
all you need to do is use the keyword"continue;" in the body of the loop
an advantage of using the continue is that it can sometimes eliminates nesting or additional blocks of code
 can enhance readability when the statement are long or deeply nested already.
 dont use it if you dont know if it benifets your loops


example

enum day{monday,tuesday,wednesday,thursday,friday,saturday,sunday};
for (enum DAY day=monday;day<=sunday;++day)
{
if (day==wednesday)
continue;

printf("its not wednesday!\n");
}


breack statement
normally after the body of a loop has been entered, a program executed all statement in the body before doing the next loop test
we learned how continue works
another statement named break alter this behavior

the break statement causes the program to immediately exit from the loop it is executing
statement in the loop are skipped ,and execution of the loop is terminated
if the break statement is inside nested loop it affects only the innermost loop containing it
use the keyword "break";
break is often used to leave a loop when there are two seperate reasons to leave
breake is also used in switch statement



while(p>0)
{
printf("%d\n",p);
scanf("%d\n,&q);
while(q>0)
{
printf("%d\n",p*q);
if(q>100)
break;  //break from inner loop
scanf("%d",&q);
}
if(q>100)
break; //break the outer loop
scanf("%d",&p);
}
